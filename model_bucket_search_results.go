/*
OpenBuckets API

The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.

API version: 1.0.0
Contact: support@openbuckets.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openbuckets

import (
	"encoding/json"
)

// checks if the BucketSearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketSearchResults{}

// BucketSearchResults struct for BucketSearchResults
type BucketSearchResults struct {
	// Total number of matching buckets
	Total *int32 `json:"total,omitempty"`
	Results []Bucket `json:"results,omitempty"`
}

// NewBucketSearchResults instantiates a new BucketSearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketSearchResults() *BucketSearchResults {
	this := BucketSearchResults{}
	return &this
}

// NewBucketSearchResultsWithDefaults instantiates a new BucketSearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketSearchResultsWithDefaults() *BucketSearchResults {
	this := BucketSearchResults{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *BucketSearchResults) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketSearchResults) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *BucketSearchResults) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *BucketSearchResults) SetTotal(v int32) {
	o.Total = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *BucketSearchResults) GetResults() []Bucket {
	if o == nil || IsNil(o.Results) {
		var ret []Bucket
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketSearchResults) GetResultsOk() ([]Bucket, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *BucketSearchResults) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Bucket and assigns it to the Results field.
func (o *BucketSearchResults) SetResults(v []Bucket) {
	o.Results = v
}

func (o BucketSearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketSearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableBucketSearchResults struct {
	value *BucketSearchResults
	isSet bool
}

func (v NullableBucketSearchResults) Get() *BucketSearchResults {
	return v.value
}

func (v *NullableBucketSearchResults) Set(val *BucketSearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketSearchResults(val *BucketSearchResults) *NullableBucketSearchResults {
	return &NullableBucketSearchResults{value: val, isSet: true}
}

func (v NullableBucketSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


